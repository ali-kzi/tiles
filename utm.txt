def UTM(longitudes, latitudes):
    """
    Transoformation from longitudes, latitudes to UTM. This function calculates Zone number itself.
    Parameters: 
    longitudes (list)
    latitudes (list)
    """
    lon_origin  = (zone(longitudes, latitudes)[0] - 1) * 6 - 180 + 3
    a = 6378137.0
    f = 1 / 298.257223563
    k0 = 0.9996
    e = np.sqrt(f * (2 - f))
    lat_rad = np.radians(latitudes)
    lon_rad = np.radians(longitudes)
    lon_origin_rad = np.radians(lon_origin)
    N = a / np.sqrt(1 - e**2 * np.sin(lat_rad)**2)
    T = np.tan(lat_rad)**2
    C = (e**2 / (1 - e**2)) * np.cos(lat_rad)**2
    A = np.cos(lat_rad) * (lon_rad - lon_origin_rad)
    M = a * ((1 - e**2 / 4 - 3 * e**4 / 64 - 5 * e**6 / 256) * lat_rad
                - (3 * e**2 / 8 + 3 * e**4 / 32 + 45 * e**6 / 1024) * np.sin(2 * lat_rad)
                + (15 * e**4 / 256 + 45 * e**6 / 1024) * np.sin(4 * lat_rad)
                - (35 * e**6 / 3072) * np.sin(6 * lat_rad))
    easting = k0 * N * (A + (1 - T + C) * A**3 / 6
                        + (5 - 18 * T + T**2 + 72 * C - 58 * (e**2 / (1 - e**2))) * A**5 / 120) + 500000
    northing = k0 * (M + N * np.tan(lat_rad) * (A**2 / 2
                        + (5 - T + 9 * C + 4 * C**2) * A**4 / 24
                        + (61 - 58 * T + T**2 + 600 * C - 330 * (e**2 / (1 - e**2))) * A**6 / 720))
    northing += np.where(np.array(latitudes)<0, 10000000, 0)
    return easting, northing